// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
///
/// This class is generated by the FlutterFire CLI and should not be manually edited
/// unless you are familiar with the process. Re-running `flutterfire configure` will
/// overwrite any manual changes.
class DefaultFirebaseOptions {
  /// Returns the [FirebaseOptions] for the current platform.
  ///
  /// This getter determines the platform (web, Android, iOS, macOS, etc.)
  /// and returns the appropriate Firebase project configuration.
  ///
  /// Throws an [UnsupportedError] if the current platform is not supported or
  /// if Firebase options have not been configured for it via FlutterFire CLI.
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    // Switch based on the default target platform.
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        // iOS configuration should be generated by FlutterFire CLI.
        // If this error is thrown, re-run `flutterfire configure`.
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        // macOS configuration should be generated by FlutterFire CLI.
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        // Windows configuration should be generated by FlutterFire CLI.
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        // Linux configuration should be generated by FlutterFire CLI.
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        // Fallback for any other unsupported platforms.
        throw UnsupportedError('DefaultFirebaseOptions are not supported for this platform.');
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyByKR0NTLjEd-4BHaYeh3pDoq1RtSg4WRg',
    appId: '1:523869870608:web:9a3da9909e4b36afbbc895',
    messagingSenderId: '523869870608',
    projectId: 'colorsnotes-e9142',
    authDomain: 'colorsnotes-e9142.firebaseapp.com',
    storageBucket: 'colorsnotes-e9142.firebasestorage.app',
    measurementId: 'G-EDQE6FKNRL',
  );

  /// Firebase options for the web platform.

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyB8e2IdFFWKKyLdwQGf-bvxhRKZmWzxdKI',
    appId: '1:523869870608:android:db8da6bae0f7d968bbc895',
    messagingSenderId: '523869870608',
    projectId: 'colorsnotes-e9142',
    storageBucket: 'colorsnotes-e9142.firebasestorage.app',
  );

  /// Firebase options for the Android platform.
}